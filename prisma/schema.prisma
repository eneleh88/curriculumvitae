generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model certification {
  id                Int       @id @default(autoincrement())
  certificationName String?   @db.VarChar
  issuedBy          String?   @db.VarChar
  earnedDate        DateTime? @db.Date
  credentialId      String?   @db.VarChar
  credentialLink    String?   @db.VarChar
  profileId         Int
  profile           profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model profile {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar
  birth         DateTime        @db.Date
  location      String          @db.VarChar
  skills        String[]        @db.VarChar
  certification certification[]
  education     education[]
  experience    experience[]
  social        social[]
  strength      strength[]
}

model social {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar
  icon      String  @db.VarChar
  link      String  @db.VarChar
  profileId Int
  profile   profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model strength {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar
  icon      String  @db.VarChar
  profileId Int
  profile   profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model education {
  id          Int       @id @default(autoincrement())
  institution String    @db.VarChar
  startYear   DateTime  @db.Date
  endYear     DateTime? @db.Date
  degree      String    @db.VarChar
  profileId   Int
  profile     profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model experience {
  id        Int       @id @default(autoincrement())
  workplace String    @db.VarChar
  startDate DateTime  @db.Date
  endDate   DateTime? @db.Date
  role      String    @db.VarChar
  profileId Int
  profile   profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
